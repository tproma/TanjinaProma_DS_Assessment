# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uLrmCH5j0ZNLuCPCyWjYU9oM5gph9K3H
"""

# Download the dataset
!gdown --id  1eADu_WmxwhBVwZX4AGKPdkw17bOToP99

from zipfile import ZipFile
with ZipFile('/content/dataset_256X256.zip', 'r') as zipObj:
  zipObj.extractall('data')

"""### Prepare the ImageDataGenerator"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator

TRAINING_DIR = "/content/data/dataset_256X256/train"
training_datagen = ImageDataGenerator(
      rescale = 1./255,
	    rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')

VALIDATION_DIR = "/content/data/dataset_256X256/test"
validation_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = training_datagen.flow_from_directory(
	TRAINING_DIR,
	target_size=(256,256),
	class_mode='categorical',
  batch_size=40
)

validation_generator = validation_datagen.flow_from_directory(
	VALIDATION_DIR,
	target_size=(256,256),
	class_mode='categorical',
  batch_size=40
)

from tensorflow.keras.callbacks import ModelCheckpoint

model_filepath = '/content/model_1-{epoch:02d}-{val_accuracy:.4f}.hdf5'
checkpoint_1 = ModelCheckpoint(
    filepath = model_filepath,
    monitor = 'val_accuracy',
    mode = 'max',
    save_best_only = True,
    verbose = 1
)

"""### Model 1:

"""

from tensorflow.keras.applications import InceptionV3
from tensorflow.keras.models import Model
from keras.layers import GlobalAveragePooling2D, Flatten, BatchNormalization, Dense, Dropout
from tensorflow.keras.layers import MaxPooling2D, GlobalAveragePooling2D

base_model = InceptionV3(
    input_shape = (256,256,3),
    weights = 'imagenet',
    include_top = False
)

for layer in base_model.layers:
  layer.trainable = False
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation = 'relu')(x)
x = Dropout(0.4)(x)
predictions = Dense(4, activation = 'softmax')(x)
model1 = Model(inputs= base_model.inputs, outputs = predictions)

model1.compile(optimizer ='adam', loss = 'categorical_crossentropy',metrics=['accuracy'])

history1 = model1.fit(
    train_generator,
    validation_data = validation_generator,
    epochs = 5, callbacks = [checkpoint_1]
)

"""### Model 2:"""

from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model
from tensorflow.keras.layers import MaxPooling2D, GlobalAveragePooling2D

base_model = VGG16(
    input_shape = (256,256,3),
    weights = 'imagenet',
    include_top = False
)

for layer in base_model.layers:
  layer.trainable = False
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation = 'relu')(x)
x = Dropout(0.4)(x)
predictions = Dense(4, activation = 'softmax')(x)
model2 = Model(inputs= base_model.inputs, outputs = predictions)

model2.compile(optimizer ='adam', loss = 'categorical_crossentropy',metrics=['accuracy'])

from tensorflow.keras.callbacks import ModelCheckpoint

model_filepath = '/content/model_2-{epoch:02d}-{val_accuracy:.4f}.hdf5'
checkpoint_2 = ModelCheckpoint(
    filepath = model_filepath,
    monitor = 'val_accuracy',
    mode = 'max',
    save_best_only = True,
    verbose = 1
)

history2 = model2.fit(
    train_generator,
    validation_data = validation_generator,
    epochs = 5, callbacks = [checkpoint_2]
)

"""### Plotting matrices"""

import matplotlib.pyplot as plt
acc = history1.history['accuracy']
val_acc = history1.history['val_accuracy']
loss = history1.history['loss']
val_loss = history1.history['val_loss']


epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label = 'Training accuracy')
plt.plot(epochs, val_acc, 'b', label = 'Validation accuracy')
plt.title("Training and Test Accuracy")
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'r', label = 'Training loss')
plt.plot(epochs, val_loss, 'b', label = 'Validation loss')
plt.title("Training and Test loss")
plt.legend()

plt.show()

import matplotlib.pyplot as plt
acc = history2.history['accuracy']
val_acc = history2.history['val_accuracy']
loss = history2.history['loss']
val_loss = history2.history['val_loss']


epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label = 'Training accuracy')
plt.plot(epochs, val_acc, 'b', label = 'Validation accuracy')
plt.title("Training and Test Accuracy")
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'r', label = 'Training loss')
plt.plot(epochs, val_loss, 'b', label = 'Validation loss')
plt.title("Training and Test loss")
plt.legend()

plt.show()

"""### Ensemble Model"""

from tensorflow.keras.models import Model, load_model
from tensorflow.keras.layers import Input, Average

model_1 = load_model('/content/model_1-03-0.9794.hdf5')
model_1 = Model(inputs = model_1.inputs,
                outputs = model_1.outputs,
                name = 'name_of_model_1')


model_2 = load_model('/content/model_2-04-0.9250.hdf5')
model_2 = Model(inputs = model_2.inputs,
                outputs = model_2.outputs,
                name = 'name_of_model_2')

models = [model_1, model_2]
model_input = Input(shape = (256,256,3))
model_outputs = [model(model_input) for model in models]
ensemble_output = Average()(model_outputs)
ensemble_model = Model(inputs = model_input,
                outputs = ensemble_output,
                name = 'ensemble')

ensemble_model.compile(optimizer ='adam', loss = 'categorical_crossentropy',metrics=['accuracy'])

from tensorflow.keras.callbacks import ModelCheckpoint

model_filepath = '/content/ensemble_model-{epoch:02d}-{val_accuracy:.4f}.hdf5'
checkpoint = ModelCheckpoint(
    filepath = model_filepath,
    monitor = 'val_accuracy',
    mode = 'max',
    save_best_only = True,
    verbose = 1
)

history = ensemble_model.fit(
    train_generator,
    validation_data = validation_generator,
    epochs = 5, callbacks = [checkpoint]
)

import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']


epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label = 'Training accuracy')
plt.plot(epochs, val_acc, 'b', label = 'Test accuracy')
plt.title("Training and Test Accuracy")
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'r', label = 'Training loss')
plt.plot(epochs, val_loss, 'b', label = 'Test loss')
plt.title("Training and Test loss")
plt.legend()

plt.show()

